{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Emre\\\\Desktop\\\\Decentralized-Press\\\\decentralized-press\\\\src\\\\HomePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Header } from \"./components/Header\";\nimport FeedList from \"./components/FeedList\";\nimport { Link } from \"react-router-dom\";\nimport getContract from \"./utilities/getContract\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [loadingArray] = useState(15); // Create a state variable to store the feeds in the blockchain\n\n  const [feeds, setFeeds] = useState([]);\n  /*\r\n   * A state variable we use to store our user's public wallet.\r\n   */\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /*\r\n   * A function to check if a user wallet is connected.\r\n   */\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      /*\r\n       * Check if we're authorized to access the user's wallet\r\n       */\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        setCurrentAccount(account);\n        console.log(\"🦄 Wallet is Connected!\");\n      } else {\n        console.log(\"Welcome 🎉  \");\n        console.log(\"To create a feed, Ensure your wallet Connected!\");\n      }\n    } catch (err) {\n      console.log(`${err.message}`);\n    }\n  };\n  /**\r\n   * Implement your connectWallet method here\r\n   */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask Connected\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(`${err.message}`);\n    }\n  };\n  /*\r\n   * Get Feeds\r\n   */\n\n\n  const getFeeds = async () => {\n    try {\n      setLoading(true);\n      const contract = await getContract();\n      const AllFeeds = await contract.getAllFeeds();\n      /*\r\n       * We only need title, category, coverImageHash, and author\r\n       * pick those out\r\n       */\n\n      const formattedFeed = AllFeeds.map(feed => {\n        return {\n          id: feed.id,\n          title: feed.title,\n          category: feed.category,\n          coverImageHash: feed.coverImageHash,\n          author: feed.author,\n          date: new Date(feed.date * 1000)\n        };\n      });\n      setFeeds(formattedFeed);\n      setLoading(false);\n    } catch (err) {\n      console.log(`${err.message}`);\n    }\n  };\n  /*\r\n   * This runs our function when the page loads.\r\n   */\n\n\n  useEffect(() => {\n    getFeeds();\n    checkIfWalletIsConnected();\n    /*\r\n     * This is a hack to make sure we only run the function once.\r\n     * We need to do this because we're using the useEffect hook.\r\n     * We can't use the useEffect hook more than once.\r\n     * https://reactjs.org/docs/hooks-effect.html\r\n     * https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-the-effects-api\r\n     * https://reactjs.org/docs/hooks-faq.html#how-do-i-optimize-the-effects-of-a-component\r\n     */\n\n    const onFeedCreated = async (id, title, description, location, category, coverImageHash, date, author) => {\n      setFeeds(prevState => [...prevState, {\n        id,\n        title,\n        description,\n        location,\n        category,\n        coverImageHash,\n        date,\n        author\n      }]);\n    };\n\n    let contract;\n\n    if (window.ethereum) {\n      contract = getContract();\n      contract.on(\"FeedCreated\", onFeedCreated);\n    }\n\n    return () => {\n      if (contract) {\n        contract.off(\"FeedCreated\", onFeedCreated);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full  flex flex-row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        currentAccount: currentAccount,\n        connectWallet: connectWallet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 flex flex-row flex-wrap\",\n        children: [feeds.map((feed, index) => {\n          return /*#__PURE__*/_jsxDEV(Link, {\n            to: `/feed?id=${feed.id}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-80 h-80 m-2\",\n              children: /*#__PURE__*/_jsxDEV(FeedList, {\n                feed: feed\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this);\n        }), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 flex flex-row flex-wrap\",\n          children: Array(loadingArray).fill(0).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-80\",\n            children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 21\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"R1W3NNm7l2H/ySKZF+/T3gc6Z8M=\");\n\n_c = Main;\n\nconst Loader = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col m-5 animate-pulse\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-300 dark:bg-borderGray h-40 rounded-lg \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-50 mt-3 bg-gray-300 dark:bg-borderGray h-6 rounded-md \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-24 bg-gray-300 h-3 dark:bg-borderGray mt-3 rounded-md \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Loader;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"Loader\");","map":{"version":3,"names":["React","useState","useEffect","Header","FeedList","Link","getContract","Main","loading","setLoading","loadingArray","feeds","setFeeds","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","accounts","request","method","length","account","console","log","err","message","connectWallet","getFeeds","contract","AllFeeds","getAllFeeds","formattedFeed","map","feed","id","title","category","coverImageHash","author","date","Date","onFeedCreated","description","location","prevState","on","off","index","Array","fill","_","Loader"],"sources":["C:/Users/Emre/Desktop/Decentralized-Press/decentralized-press/src/HomePage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Header } from \"./components/Header\";\r\nimport FeedList from \"./components/FeedList\";\r\nimport { Link } from \"react-router-dom\";\r\nimport getContract from \"./utilities/getContract\";\r\n\r\nexport default function Main() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingArray] = useState(15);\r\n\r\n  // Create a state variable to store the feeds in the blockchain\r\n  const [feeds, setFeeds] = useState([]);\r\n\r\n  /*\r\n   * A state variable we use to store our user's public wallet.\r\n   */\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n\r\n  /*\r\n   * A function to check if a user wallet is connected.\r\n   */\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      /*\r\n       * Check if we're authorized to access the user's wallet\r\n       */\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        setCurrentAccount(account);\r\n        console.log(\"🦄 Wallet is Connected!\");\r\n      } else {\r\n        console.log(\"Welcome 🎉  \");\r\n        console.log(\"To create a feed, Ensure your wallet Connected!\");\r\n      }\r\n    } catch (err) {\r\n        console.log(`${err.message}`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Implement your connectWallet method here\r\n   */\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have MetaMask Connected\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (err) {\r\n        console.log(`${err.message}`);\r\n    }\r\n  };\r\n\r\n  /*\r\n   * Get Feeds\r\n   */\r\n  const getFeeds = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const contract = await getContract();\r\n      const AllFeeds = await contract.getAllFeeds();\r\n      /*\r\n       * We only need title, category, coverImageHash, and author\r\n       * pick those out\r\n       */\r\n      const formattedFeed = AllFeeds.map((feed) => {\r\n        return {\r\n          id: feed.id,\r\n          title: feed.title,\r\n          category: feed.category,\r\n          coverImageHash: feed.coverImageHash,\r\n          author: feed.author,\r\n          date: new Date(feed.date * 1000),\r\n        };\r\n      });\r\n      setFeeds(formattedFeed);\r\n      setLoading(false);\r\n    } catch (err) {\r\n        console.log(`${err.message}`);\r\n    }\r\n  };\r\n\r\n  /*\r\n   * This runs our function when the page loads.\r\n   */\r\n  useEffect(() => {\r\n    getFeeds();\r\n    checkIfWalletIsConnected();\r\n\r\n    /*\r\n     * This is a hack to make sure we only run the function once.\r\n     * We need to do this because we're using the useEffect hook.\r\n     * We can't use the useEffect hook more than once.\r\n     * https://reactjs.org/docs/hooks-effect.html\r\n     * https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-the-effects-api\r\n     * https://reactjs.org/docs/hooks-faq.html#how-do-i-optimize-the-effects-of-a-component\r\n     */\r\n    const onFeedCreated = async (\r\n      id,\r\n      title,\r\n      description,\r\n      location,\r\n      category,\r\n      coverImageHash,\r\n      date,\r\n      author\r\n    ) => {\r\n      setFeeds((prevState) => [\r\n        ...prevState,\r\n        {\r\n          id,\r\n          title,\r\n          description,\r\n          location,\r\n          category,\r\n          coverImageHash,\r\n          date,\r\n          author,\r\n        },\r\n      ]);\r\n    };\r\n\r\n    let contract;\r\n\r\n    if (window.ethereum) {\r\n      contract = getContract();\r\n      contract.on(\"FeedCreated\", onFeedCreated);\r\n    }\r\n\r\n    return () => {\r\n      if (contract) {\r\n        contract.off(\"FeedCreated\", onFeedCreated);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"w-full  flex flex-row\">\r\n      <div className=\"flex-1 flex flex-col\">\r\n        <Header\r\n          currentAccount={currentAccount}\r\n          connectWallet={connectWallet}\r\n        />\r\n        <div className=\"flex-1 flex flex-row flex-wrap\">\r\n          {feeds.map((feed, index) => {\r\n            return (\r\n              <Link to={`/feed?id=${feed.id}`} key={index}>\r\n                <div className=\"w-80 h-80 m-2\">\r\n                  <FeedList feed={feed} />\r\n                </div>\r\n              </Link>\r\n            );\r\n          })}\r\n          {loading && (\r\n            <div className=\"flex-1 flex flex-row flex-wrap\">\r\n              {Array(loadingArray)\r\n                .fill(0)\r\n                .map((_, index) => (\r\n                  <div key={index} className=\"w-80\">\r\n                    <Loader />\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"flex flex-col m-5 animate-pulse\">\r\n      <div className=\"w-full bg-gray-300 dark:bg-borderGray h-40 rounded-lg \"></div>\r\n      <div className=\"w-50 mt-3 bg-gray-300 dark:bg-borderGray h-6 rounded-md \"></div>\r\n      <div className=\"w-24 bg-gray-300 h-3 dark:bg-borderGray mt-3 rounded-md \"></div>\r\n    </div>\r\n  );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}