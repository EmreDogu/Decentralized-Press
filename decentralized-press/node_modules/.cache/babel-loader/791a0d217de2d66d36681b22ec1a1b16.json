{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Emre\\\\Desktop\\\\Decentralized-Press\\\\decentralized-press\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport NewsList from \"./artifacts/backend/components/newsList\";\nimport getContract from \"./artifacts/backend/utilities/getContract\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  const [news, setNews] = useState([]);\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        setCurrentAccount(account);\n        success(\"ðŸ¦„ Wallet is Connected!\");\n      } else {\n        connectWallet();\n      }\n    } catch (err) {\n      error(`${err.message}`);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        warn(\"Make sure you have MetaMask Connected\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      error(`${err.message}`);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n\n    const onFeedCreated = async (id, title, description, location, category, coverImageHash, date, author) => {\n      setFeeds(prevState => [...prevState, {\n        id,\n        title,\n        description,\n        location,\n        category,\n        coverImageHash,\n        date,\n        author\n      }]);\n    };\n\n    let contract;\n\n    if (window.ethereum) {\n      contract = getContract();\n      contract.on(\"FeedCreated\", onFeedCreated);\n    }\n\n    return () => {\n      if (contract) {\n        contract.off(\"FeedCreated\", onFeedCreated);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" Header \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: news.map((New, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(NewsList, {\n            New: New\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Main, \"qr5FUdZgfQApJFOBSxYaY1E94qc=\");\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","NewsList","getContract","Main","news","setNews","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","accounts","request","method","length","account","success","connectWallet","err","error","message","warn","onFeedCreated","id","title","description","location","category","coverImageHash","date","author","setFeeds","prevState","contract","on","off","map","New","index"],"sources":["C:/Users/Emre/Desktop/Decentralized-Press/decentralized-press/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport NewsList from \"./artifacts/backend/components/newsList\";\nimport getContract from \"./artifacts/backend/utilities/getContract\";\n\nexport default function Main() {\n  const [news, setNews] = useState([]);\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts. length !== 0) {\n        const account = accounts[0];\n        setCurrentAccount(account);\n        success(\"ðŸ¦„ Wallet is Connected!\");\n      } else {\n        connectWallet();\n      }\n    } catch (err) {\n      error(`${err.message}`);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        warn(\"Make sure you have MetaMask Connected\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      error(`${err.message}`);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    const onFeedCreated = async (\n      id,\n      title,\n      description,\n      location,\n      category,\n      coverImageHash,\n      date,\n      author\n    ) => {\n      setFeeds((prevState) => [\n        ...prevState,\n        {\n          id,\n          title,\n          description,\n          location,\n          category,\n          coverImageHash,\n          date,\n          author,\n        },\n      ]);\n    };\n\n    let contract;\n\n    if (window.ethereum) {\n      contract = getContract();\n      contract.on(\"FeedCreated\", onFeedCreated);\n    }\n\n    return () => {\n      if (contract) {\n        contract.off(\"FeedCreated\", onFeedCreated);\n      }\n    };\n  }, []);\n\n  return (\n      <div>\n        <div> Header </div>\n        <div>\n          {news.map((New, index) => {\n            return (\n                <div>\n                  <NewsList New={New} />\n                </div>\n            );\n          })}\n        </div>\n      </div>\n  );\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,yCAArB;AACA,OAAOC,WAAP,MAAwB,2CAAxB;;AAEA,eAAe,SAASC,IAAT,GAAgB;EAAA;;EAC7B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,EAAD,CAApD;;EAEA,MAAMS,wBAAwB,GAAG,YAAY;IAC3C,IAAI;MACF,MAAM;QAAEC;MAAF,IAAeC,MAArB;MACA,MAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiB;QAAEC,MAAM,EAAE;MAAV,CAAjB,CAAvB;;MAEA,IAAIF,QAAQ,CAAEG,MAAV,KAAqB,CAAzB,EAA4B;QAC1B,MAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;QACAJ,iBAAiB,CAACQ,OAAD,CAAjB;QACAC,OAAO,CAAC,yBAAD,CAAP;MACD,CAJD,MAIO;QACLC,aAAa;MACd;IACF,CAXD,CAWE,OAAOC,GAAP,EAAY;MACZC,KAAK,CAAE,GAAED,GAAG,CAACE,OAAQ,EAAhB,CAAL;IACD;EACF,CAfD;;EAiBA,MAAMH,aAAa,GAAG,YAAY;IAChC,IAAI;MACF,MAAM;QAAER;MAAF,IAAeC,MAArB;;MAEA,IAAI,CAACD,QAAL,EAAe;QACbY,IAAI,CAAC,uCAAD,CAAJ;QACA;MACD;;MAED,MAAMV,QAAQ,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiB;QACtCC,MAAM,EAAE;MAD8B,CAAjB,CAAvB;MAGAN,iBAAiB,CAACI,QAAQ,CAAC,CAAD,CAAT,CAAjB;IACD,CAZD,CAYE,OAAOO,GAAP,EAAY;MACZC,KAAK,CAAE,GAAED,GAAG,CAACE,OAAQ,EAAhB,CAAL;IACD;EACF,CAhBD;;EAkBApB,SAAS,CAAC,MAAM;IACdQ,wBAAwB;;IACxB,MAAMc,aAAa,GAAG,OACpBC,EADoB,EAEpBC,KAFoB,EAGpBC,WAHoB,EAIpBC,QAJoB,EAKpBC,QALoB,EAMpBC,cANoB,EAOpBC,IAPoB,EAQpBC,MARoB,KASjB;MACHC,QAAQ,CAAEC,SAAD,IAAe,CACtB,GAAGA,SADmB,EAEtB;QACET,EADF;QAEEC,KAFF;QAGEC,WAHF;QAIEC,QAJF;QAKEC,QALF;QAMEC,cANF;QAOEC,IAPF;QAQEC;MARF,CAFsB,CAAhB,CAAR;IAaD,CAvBD;;IAyBA,IAAIG,QAAJ;;IAEA,IAAIvB,MAAM,CAACD,QAAX,EAAqB;MACnBwB,QAAQ,GAAG/B,WAAW,EAAtB;MACA+B,QAAQ,CAACC,EAAT,CAAY,aAAZ,EAA2BZ,aAA3B;IACD;;IAED,OAAO,MAAM;MACX,IAAIW,QAAJ,EAAc;QACZA,QAAQ,CAACE,GAAT,CAAa,aAAb,EAA4Bb,aAA5B;MACD;IACF,CAJD;EAKD,CAvCQ,EAuCN,EAvCM,CAAT;EAyCA,oBACI;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,UACGlB,IAAI,CAACgC,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgB;QACxB,oBACI;UAAA,uBACE,QAAC,QAAD;YAAU,GAAG,EAAED;UAAf;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QADJ;MAKD,CANA;IADH;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAcD;;GA9FuBlC,I;;KAAAA,I"},"metadata":{},"sourceType":"module"}